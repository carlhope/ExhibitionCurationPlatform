@page "/"
@using ExhibitionCurationPlatform.Models
@using ExhibitionCurationPlatform.Services.Interfaces
@using ExhibitionCurationPlatform.Components.UI
@rendermode InteractiveServer
@inject IArtCollectionService ArtCollectionService

<PageTitle>Home</PageTitle>

<ArtSearchBar OnSearch="@UpdateQuery" />

@if (isLoading)
{
    <p>Loading artworks...</p>
}
else if (artworks.Count == 0)
{
    <p>No artworks found for "@query".</p>
}
else
{
    <div class="row row-cols-1 row-cols-lg-2 row-cols-xxl-3 g-4">
        @foreach (var artwork in artworks)
        {
            <div class="col">
                <ArtworkCard Artwork="@artwork" />
            </div>
        }
    </div>

    <ArtPaginationControls
        CurrentPage="@currentPage"
        TotalPages="@totalPages"
        CanGoBack="@CanGoBack"
        CanGoForward="@CanGoForward"
        Previous="@PreviousPage"
        Next="@NextPage" />
}

@code {
    private List<Artwork> artworks = new();
    private string query = "landscape";
    private bool isLoading = true;

    private int currentPage = 1;
    private int pageSize = 12;
    private int totalCount;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    private string currentSort = "";


    protected override async Task OnInitializedAsync() => await LoadPage(currentPage);

    private async Task LoadPage(int page)
    {
        isLoading = true;
        var result = await ArtCollectionService.SearchAsync(query, page, pageSize, currentSort, null);
        artworks = result.Items;
        totalCount = result.TotalCount;
        currentPage = page;
        isLoading = false;
    }
    private async Task UpdateQuery((string newQuery, string sortBy) searchParams)
    {
        query = searchParams.newQuery;
        currentSort = searchParams.sortBy;
        await LoadPage(1);
    }


    private async Task PreviousPage() => await LoadPage(currentPage - 1);
    private async Task NextPage() => await LoadPage(currentPage + 1);

    private bool CanGoBack => currentPage > 1;
    private bool CanGoForward => currentPage < totalPages;
}