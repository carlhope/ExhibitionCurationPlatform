
@page "/"
@rendermode InteractiveServer
@using ExhibitionCurationPlatform.Models
@using ExhibitionCurationPlatform.Services.Interfaces
@inject IArtCollectionService ArtCollectionService


<PageTitle>Home</PageTitle>

@if (isLoading)
{
    <p>Loading artworks...</p>
}
else if (artworks.Count == 0)
{
    <p>No artworks found for "@query".</p>
}
else
{
    <div>
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var artwork in artworks)
            {
                <div class="col">
                    <div class="card h-100">
                        <img src="@artwork.ImageUrl" class="card-img-top" alt="@artwork.Title" />
                        <div class="card-body">
                            <h5 class="card-title">@artwork.Title</h5>
                            <p class="card-text">TODO: insert a description here</p>
                            <span class="badge bg-secondary">@artwork.Source</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="mt-4 d-flex justify-content-center">
            <button class="btn btn-outline-primary me-2" @onclick="PreviousPage" disabled="@(!CanGoBack)">Previous</button>
            <span>Page @currentPage of @totalPages</span>
            <button class="btn btn-outline-primary ms-2" @onclick="NextPage" disabled="@(!CanGoForward)">Next</button>

        </div>
    </div>
}

@code {
    private List<Artwork> artworks = new();
    private string query = "landscape";
    private bool isLoading = true;

    private int currentPage = 1;
    private int pageSize = 12;
    private int totalCount;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);

    protected override async Task OnInitializedAsync()
    {

        await LoadPage(currentPage);
    }

    private async Task LoadPage(int page)
    {
        isLoading = true;
        var result = await ArtCollectionService.SearchAsync(query, page, pageSize);
        artworks = result.Items;
        totalCount = result.TotalCount;
        currentPage = page;
        isLoading = false;
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
            await LoadPage(currentPage - 1);
    }

    private async Task NextPage()
    {
        if ((currentPage * pageSize) < totalCount)
            await LoadPage(currentPage + 1);
    }

    private bool CanGoBack => currentPage > 1;
    private bool CanGoForward => (currentPage * pageSize) < totalCount;
}