@page "/my-artworks"
@rendermode InteractiveServer
@using ExhibitionCurationPlatform.Components.UI
@using ExhibitionCurationPlatform.Models
@using ExhibitionCurationPlatform.Services.Interfaces
@inject IArtworkService ArtworkService
@inject IExhibitionService ExhibitionService

<PageTitle>Your Artworks</PageTitle>

@if (artworks == null)
{
    <p>Loading...</p>
}
else if (!artworks.Any())
{
    <div class="alert alert-info">You haven't added any artworks yet.</div>
}
else
{
    <div class="row row-cols-1 row-cols-1 row-cols-lg-2 row-cols-xxl-3 g-4">
  @foreach (var art in artworks)
{
     
      <ArtworkCardWithCollection
        Artwork="art"
        UserCollections="userCollections"
        OnAddToCollection="HandleAddArtworkToExhibition" />
}
        
    </div>
}

@code {
    private List<Artwork>? artworks;
    private List<Exhibition>? userCollections;
    private Guid selectedCollectionId;
    private Dictionary<string, Guid> artworkCollectionSelections = new(); // artworkId → collectionId

    protected override async Task OnInitializedAsync()
    {
        var userId = "User"; // Replace with actual user ID once Identity is integrated
        artworks = await ArtworkService.GetUserArtworksAsync(userId);
        userCollections = await ExhibitionService.GetExhibitionsByCuratorAsync(userId);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    private void OnCollectionSelected(string artworkId, Guid collectionId)
    {
        artworkCollectionSelections[artworkId] = collectionId;
    }
    private async Task HandleAddArtworkToExhibition((string artworkId, Guid collectionId) args)
    {
        if (args.collectionId == Guid.Empty) return;
        var artwork = artworks?.FirstOrDefault(a => a.Id == args.artworkId);
        if (artwork == null) return;

        var success = await ExhibitionService.AddArtworkAsync(args.collectionId, artwork);
    }
}
