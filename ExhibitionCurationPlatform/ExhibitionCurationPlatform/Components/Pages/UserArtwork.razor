@page "/my-artworks"
@rendermode InteractiveServer
@using ExhibitionCurationPlatform.Models
@using ExhibitionCurationPlatform.Services.Interfaces
@inject IArtworkService ArtworkService
@inject IExhibitionService ExhibitionService

<PageTitle>Your Artworks</PageTitle>

@if (artworks == null)
{
    <p>Loading...</p>
}
else if (!artworks.Any())
{
    <div class="alert alert-info">You haven't added any artworks yet.</div>
}
else
{
    <div class="row">
  @foreach (var art in artworks)
{
    <div class="col-md-4 mb-4">
        <div class="card h-100">
            <img src="@art.ImageUrl" class="card-img-top" alt="@art.Title" />
            <div class="card-body">
                <h5 class="card-title">@art.Title</h5>
                <p class="card-text"><strong>Artist:</strong> @art.Artist</p>
                <p class="card-text"><strong>Date:</strong> @art.Date</p>
                <span class="badge bg-secondary">@art.Source</span>

                @if (userCollections != null && userCollections.Any())
                {
                    <div class="mt-3">
                   <select class="form-select"
        @onchange="(e) => OnCollectionSelected(art.Id, Guid.Parse(e.Value?.ToString() ?? Guid.Empty.ToString()))">
    <option value="">Select collection</option>
    @foreach (var col in userCollections)
    {
        <option value="@col.Id">@col.Title</option>
    }
</select>

                        <button class="btn btn-sm btn-primary mt-2"
                                @onclick="() => AddArtworkToCollection(art.Id)">
                            Add to Collection
                        </button>
                    </div>
                }
            </div> <!-- card-body -->
        </div> <!-- card -->
    </div> <!-- col -->
}
        
    </div>
    ///
 
    ///
}

@code {
    private List<Artwork>? artworks;
    private List<Exhibition>? userCollections;
    private Guid selectedCollectionId;
    private Dictionary<string, Guid> artworkCollectionSelections = new(); // artworkId → collectionId

    protected override async Task OnInitializedAsync()
    {
        var userId = "User"; // Replace with actual user ID once Identity is integrated
        artworks = await ArtworkService.GetUserArtworksAsync(userId);
        userCollections = await ExhibitionService.GetExhibitionsByCuratorAsync(userId);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    private void OnCollectionSelected(string artworkId, Guid collectionId)
    {
        artworkCollectionSelections[artworkId] = collectionId;
    }

    private async Task AddArtworkToCollection(string artworkId)
    {
        if (!artworkCollectionSelections.TryGetValue(artworkId, out var collectionId) || collectionId == Guid.Empty)
            return; // Optionally show warning

        var artwork = artworks?.FirstOrDefault(a => a.Id == artworkId.ToString());
        if (artwork == null) return;

        var success = await ExhibitionService.AddArtworkAsync(collectionId, artwork);
        if (success)
        {
            // Refactor: show success message or update UI
        }
        else
        {
            // Refactor: show error message
        }
    }
}
