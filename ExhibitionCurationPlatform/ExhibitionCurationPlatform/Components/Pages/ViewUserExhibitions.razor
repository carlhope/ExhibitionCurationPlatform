@page "/exhibitions"
@rendermode InteractiveServer
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using ExhibitionCurationPlatform.Components.UI
@using ExhibitionCurationPlatform.Models
@using ExhibitionCurationPlatform.Services
@using ExhibitionCurationPlatform.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IExhibitionService ExhibitionService

<PageTitle>Your Exhibitions</PageTitle>

@if (exhibitions == null)
{
    <p>Loading exhibitions...</p>
}
else if (!exhibitions.Any())
{
    <div class="alert alert-warning">No exhibitions found for this curator.</div>
}
else
{
    <div class="exhibition-list">
        @foreach (var exhibition in exhibitions)
        {
            <div class="exhibition-card border rounded p-3 mb-4">
                <div class="card-title h4">@exhibition.Title</div>
                <p>@exhibition.Description</p>
                <p><strong>Scheduled:</strong> @(exhibition.ScheduledDate?.ToShortDateString() ?? "Not scheduled")</p>
                <p><strong>Created:</strong> @exhibition.CreatedAt.ToShortDateString()</p>
                <p><strong>Layout:</strong> @exhibition.Layout</p>
                <p><strong>Theme:</strong> @exhibition.Theme</p>
                <p><strong>Artworks:</strong> @exhibition.Artworks.Count</p>

                @if (exhibition.Artworks?.Any() == true)
                {
                    <div class="artwork-list row row-cols-1 row-cols-lg-2 row-cols-xxl-3 g-3">
                        @foreach (var artwork in exhibition.Artworks)
                        {
                            <div class="col">
                                <div class="position-relative">
                                    <ArtworkCard Artwork="artwork" />
                                    <button class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2"
                                            @onclick="() => RemoveArtwork(exhibition.Id, artwork.Id)">
                                        ✖
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<Exhibition> exhibitions;

    protected override async Task OnInitializedAsync()
    {

        var curator = await GetUserId();
        exhibitions = await ExhibitionService.GetExhibitionsByCuratorAsync(curator);
    }
    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        return userId;
    }
    private async Task RemoveArtwork(Guid exhibitionId, string artworkId)
    {
        var success = await ExhibitionService.RemoveArtworkAsync(exhibitionId, artworkId);
        if (success)
        {
            // Optionally remove artwork from local list to update UI
            var exhibition = exhibitions.FirstOrDefault(e => e.Id == exhibitionId);
            var artworkToRemove = exhibition?.Artworks.FirstOrDefault(a => a.Id == artworkId);
            if (artworkToRemove != null)
            {
                exhibition.Artworks.Remove(artworkToRemove);
            }
        }
        else
        {
            Console.WriteLine("Failed to remove artwork.");
        }
    }
}
