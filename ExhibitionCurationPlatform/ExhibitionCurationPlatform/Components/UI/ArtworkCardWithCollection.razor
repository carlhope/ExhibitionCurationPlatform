@using ExhibitionCurationPlatform.Models

<div class="card h-100">
    <img src="@(!string.IsNullOrWhiteSpace(Artwork.ImageUrl) ? Artwork.ImageUrl : "/images/image-not-found.png")"
         class="card-img-top"
         alt="@Artwork.Title"
         onerror="this.onerror=null;this.src='/images/image-not-found.png';"
         height="600" />
    <div class="card-body">
        <div class="card-title h5">@Artwork.Title</div>
        <p class="card-text" aria-label="Description">@Artwork.Description</p>
        <p class="card-text"><strong>Artist:</strong> @Artwork.Artist</p>
        @if (Artwork.Date != new DateOnly(1, 1, 1))
        {
            <p><strong>Date:</strong> @Artwork.Date.Year.ToString("D4")</p>
        }
        else if (!string.IsNullOrWhiteSpace(Artwork.DateAsString))
        {
            <p><strong>Date:</strong> @Artwork.DateAsString</p>
        }
        else
        {
            <p><strong>Date:</strong> Unknown</p>
        }
        <span class="badge bg-secondary">@Artwork.Source</span>
        <a class="btn btn-sm btn-outline-primary"
           href="@($"/artwork/{Artwork.Source.ToLower()}/{Artwork.Id}")">
            Details
        </a>

        @if (UserCollections?.Any() == true)
        {
            <div class="mt-3">
                <select class="form-select"
                        @onchange="OnCollectionChanged"
                        aria-label="Select collection">
                    <option value="">Select collection</option>
                    @foreach (var col in UserCollections)
                    {
                        <option value="@col.Id">@col.Title</option>
                    }
                </select>

                <button class="btn btn-sm btn-primary mt-2"
                        @onclick="AddToCollection">
                    Add to Collection
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Artwork Artwork { get; set; } = default!;
    [Parameter] public List<Exhibition>? UserCollections { get; set; }
    [Parameter] public EventCallback<(string artworkId, Guid collectionId)> OnAddToCollection { get; set; }

    private Guid selectedCollectionId;

    private void OnCollectionChanged(ChangeEventArgs e)
    {
        selectedCollectionId = Guid.TryParse(e.Value?.ToString(), out var id) ? id : Guid.Empty;
    }

    private async Task AddToCollection()
    {
        if (selectedCollectionId != Guid.Empty)
        {
            await OnAddToCollection.InvokeAsync((Artwork.Id, selectedCollectionId));
        }
    }
}
